[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "t2c"
version = "0.1.0"
description = "Test 2 Code with LLMs - Academic research tool for LLM-based code generation"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Filippo Gurioli", email = "filippo.gurioli@studio.unibo.it" },
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Code Generators",
]
requires-python = ">=3.11"
dependencies = [
    "click>=8.1.0",      # CLI framework
    "pydantic>=2.0.0",   # Data validation and settings
    "pyyaml>=6.0",       # YAML configuration
    "requests>=2.28.0",  # HTTP requests
    "rich>=13.0.0",      # Rich console output
    "typer>=0.9.0",      # Type-safe CLI
    "httpx>=0.24.0",     # Async HTTP client for LLM APIs
    "aiofiles>=23.0.0",  # Async file operations
    "jinja2>=3.1.0",     # Template engine
    "docker>=6.0.0",     # Docker integration for sandboxing
    "psutil>=5.9.0",     # System monitoring
    "pandas>=2.0.0",     # Data analysis
    "matplotlib>=3.7.0", # Plotting for reports
    "seaborn>=0.12.0",   # Statistical plotting
]

[project.optional-dependencies]
dev = [
    "litellm >= 1.70.0",       # LLM interaction
    "pytest>=7.4.0",           # Testing framework
    "pytest-asyncio>=0.21.0",  # Async testing
    "pytest-cov>=4.1.0",       # Coverage reporting
    "pytest-mock>=3.11.0",     # Mocking utilities
    "pytest-watch>=4.2.0",     # Test watcher for TDD
    "black>=23.0.0",           # Code formatting
    "ruff>=0.0.290",           # Fast linting
    "mypy>=1.5.0",             # Type checking
    "pre-commit>=3.4.0",       # Git hooks
    "safety>=2.3.0",           # Security vulnerability scanner
    "bandit[toml]>=1.7.0",     # Security linter
    "sphinx>=7.1.0",           # Documentation
    "sphinx-rtd-theme>=1.3.0", # Documentation theme
    "types-requests>=2.28.0",  # Type hints for requests
    "types-PyYAML>=6.0.0",     # Type hints for PyYAML
]

[project.scripts]
t2c = "t2c.main:main"

[project.urls]
Homepage = "https://filippogurioli.github.io/test-2-code-llm/"
Documentation = "https://filippogurioli.github.io/test-2-code-llm/"
Repository = "https://github.com/FilippoGurioli/test-2-code-llm"
Issues = "https://github.com/FilippoGurioli/test-2-code-llm/issues"

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/t2c",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = ["unit: Unit tests"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "docs", "build", "dist"]
# Skip some common false positives
skips = ["B101", "B601", "B404", "B603"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*test_*.py"]
